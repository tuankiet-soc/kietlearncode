# ============================================================
# üì¶ MAP HCM DISTRICT + WARD HEATMAP + CENTRAL RADIUS + DASHBOARD (V6)
# ============================================================
import pandas as pd
import geopandas as gpd
import json
import os
import unicodedata
from math import radians, cos, sin, sqrt, atan2

# ============================================================
# 1Ô∏è‚É£ INPUT FILE
# ============================================================
excel_path = "/Users/trankiet/Desktop/data_output1.xlsx"
geojson_nationwide = "/Users/trankiet/Downloads/gadm41_VNM_3.json"
geojson_hcm = "/Users/trankiet/Downloads/hcm_wards_from_gadm.json"
output_html = "/Users/trankiet/Desktop/map_hcm_quan_phuong_v6.html"

# ============================================================
# 2Ô∏è‚É£ FILTER TP.HCM (CH·∫†Y 1 L·∫¶N)
# ============================================================
if not os.path.exists(geojson_hcm):
    print("üìç ƒêang l·ªçc TP.HCM t·ª´ file to√†n qu·ªëc...")
    gdf = gpd.read_file(geojson_nationwide)
    gdf_hcm = gdf[gdf["NAME_1"] == "Ho Chi Minh"].copy()
    gdf_hcm.to_file(geojson_hcm, driver="GeoJSON")
    print("‚úÖ ƒê√£ t·∫°o file:", geojson_hcm)
else:
    print("‚úÖ File TP.HCM ƒë√£ t·ªìn t·∫°i:", geojson_hcm)

# ============================================================
# 3Ô∏è‚É£ LOAD DATA
# ============================================================
df = pd.read_excel(excel_path).dropna(subset=["de_lat", "de_lng", "seller_confirmed"])
df = df[["shipment_id", "json_district", "json_province", "seller_confirmed", "de_lat", "de_lng"]].drop_duplicates()
df["seller_confirmed"] = pd.to_datetime(df["seller_confirmed"], errors="coerce")

def normalize(s):
    if pd.isna(s):
        return ""
    s = str(s).strip().lower()
    s = "".join(c for c in unicodedata.normalize("NFD", s) if unicodedata.category(c) != "Mn")
    s = s.replace("thanh pho", "").replace("tp.", "").replace("tp", "")
    s = s.replace("quan ", "quan").replace("huyen ", "huyen")
    return s

df["buy_c_norm"] = df["json_district"].apply(normalize)
df["buy_di_norm"] = df["json_province"].apply(normalize)

# ============================================================
# 4Ô∏è‚É£ T√çNH METRIC
# ============================================================
df["date"] = df["seller_confirmed"].dt.date
df["week"] = df["seller_confirmed"].dt.isocalendar().week
df["month"] = df["seller_confirmed"].dt.to_period("M")

ado_by_ward = (
    df.groupby(["buy_c_norm", "buy_di_norm"])
    .agg(ADO=("shipment_id", "count"))
    .reset_index()
)
ado_by_ward["Week"] = ado_by_ward["ADO"] / df["week"].nunique()
ado_by_ward["Month"] = ado_by_ward["ADO"] / df["month"].nunique()

# ============================================================
# 5Ô∏è‚É£ LOAD GEOJSON TP.HCM
# ============================================================
with open(geojson_hcm, "r", encoding="utf-8") as f:
    geo = json.load(f)
for feat in geo["features"]:
    props = feat["properties"]
    props["NAME_2_norm"] = normalize(props.get("NAME_2", ""))
    props["NAME_3_norm"] = normalize(props.get("NAME_3", ""))

# ============================================================
# 6Ô∏è‚É£ G·∫ÆN D·ªÆ LI·ªÜU
# ============================================================
ward_dict = ado_by_ward.set_index(["buy_c_norm", "buy_di_norm"])[["ADO", "Week", "Month"]].to_dict("index")
for feat in geo["features"]:
    c = feat["properties"]["NAME_2_norm"]
    w = feat["properties"]["NAME_3_norm"]
    metric = ward_dict.get((c, w), {"ADO": 0, "Week": 0, "Month": 0})
    feat["properties"]["ADO"] = round(metric["ADO"], 1)
    feat["properties"]["Week"] = round(metric["Week"], 1)
    feat["properties"]["Month"] = round(metric["Month"], 1)

geojson_js = json.dumps(geo, ensure_ascii=False)

# ============================================================
# 7Ô∏è‚É£ T√çNH KHO·∫¢NG C√ÅCH T·ªöI CENTRAL
# ============================================================
central_lat, central_lng = 10.819768, 106.671416
def haversine(lat, lng):
    R = 6371
    dlat = radians(lat - central_lat)
    dlon = radians(lng - central_lng)
    a = sin(dlat / 2)**2 + cos(radians(central_lat)) * cos(radians(lat)) * sin(dlon / 2)**2
    return 2 * R * atan2(sqrt(a), sqrt(1 - a))
df["distance_km"] = df.apply(lambda r: haversine(r["de_lat"], r["de_lng"]), axis=1)

bins = [0, 5, 10, 15, 20, 9999]
labels = ["0‚Äì5 km", "5‚Äì10 km", "10‚Äì15 km", "15‚Äì20 km", ">20 km"]
df["radius_group"] = pd.cut(df["distance_km"], bins=bins, labels=labels, right=False)

stat = (
    df.groupby("radius_group")["shipment_id"]
    .count().reset_index(name="Count")
)
total = stat["Count"].sum()
stat["Pct"] = (stat["Count"] / total * 100).round(1)
stats_json = stat.to_dict(orient="records")

# ============================================================
# 8Ô∏è‚É£ HTML MAP
# ============================================================
html = f"""
<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<title>üì¶ Volume Map TP.HCM (V6)</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
<style>
  body {{ margin:0; font-family:Arial, sans-serif; }}
  #map {{ height: 93vh; width: 100%; }}
  .controls {{ background:#fff; padding:10px; }}
  .legend, .stats {{
    background:white; padding:8px; border-radius:6px;
    font-size:13px; line-height:1.5; color:#333;
  }}
  .legend i {{ width:16px; height:16px; float:left; margin-right:6px; opacity:0.8; }}
</style>
</head>
<body>

<div class="controls">
  Type:
  <select id="typeSelect">
    <option value="Delivery" selected>Delivery</option>
    <option value="Pickup" disabled>Pickup (coming soon)</option>
  </select>
  Metric:
  <select id="metricSelect">
    <option value="ADO" selected>ADO</option>
    <option value="Week">Week</option>
    <option value="Month">Month</option>
  </select>
  District:
  <select id="districtSelect"><option value="all">-- T·∫•t c·∫£ --</option></select>
  <label><input type="checkbox" id="radiusToggle" checked> Hi·ªÉn th·ªã b√°n k√≠nh</label>
</div>

<div id="map"></div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
const geoData = {geojson_js};
const statsData = {json.dumps(stats_json, ensure_ascii=False)};
const map = L.map('map').setView([10.77,106.7],9);
L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png').addTo(map);

function getColor(v,max){{
  const r=v/max;
  if(r===0)return'#f2f2f2';
  if(r<0.2)return'#fee8c8';
  if(r<0.4)return'#fdbb84';
  if(r<0.6)return'#fc8d59';
  if(r<0.8)return'#e34a33';
  return'#b30000';
}}

const central=[10.819768,106.671416];
const radiusDefs=[
  {{r:5000,color:"#27ae60",label:"0‚Äì5 km"}},
  {{r:10000,color:"#f1c40f",label:"5‚Äì10 km"}},
  {{r:15000,color:"#e67e22",label:"10‚Äì15 km"}},
  {{r:20000,color:"#e74c3c",label:"15‚Äì20 km"}},
  {{r:30000,color:"#8e44ad",label:">20 km"}}
];
let radiusGroup=L.layerGroup();
radiusDefs.forEach(r=>{{
  L.circle(central,{{radius:r.r,color:r.color,fillOpacity:0.04,weight:1.3,dashArray:"4 4"}})
   .bindTooltip(`üìè ${{r.label}}`,{{direction:"center"}})
   .addTo(radiusGroup);
}});
radiusGroup.addTo(map);
L.marker(central,{{icon:L.icon({{iconUrl:"https://cdn-icons-png.flaticon.com/512/854/854878.png",iconSize:[32,32]}})}})
.bindPopup("üì¶ Central Hub").addTo(map);

const allDistricts=[...new Set(geoData.features.map(f=>f.properties.NAME_2))].sort();
const dSel=document.getElementById("districtSelect");
allDistricts.forEach(d=>{{const o=document.createElement("option");o.value=d;o.textContent=d;dSel.appendChild(o);}});

let layer;
function render(metric,selected){{
  if(layer)map.removeLayer(layer);
  const maxVal=Math.max(...geoData.features.map(f=>f.properties[metric]));
  layer=L.geoJSON(geoData,{{
    style:f=>{{
      const p=f.properties;
      let color='#f2f2f2';
      if(selected==='all'||p.NAME_2===selected)
        color=getColor(p[metric],maxVal);
      return{{color:'#666',weight:1,fillColor:color,fillOpacity:0.85}};
    }},
    onEachFeature:(f,l)=>{{
      const p=f.properties;
      if(selected==='all'||p.NAME_2===selected)
        l.bindPopup(`<b>${{p.NAME_3}}</b><br>ADO: ${{p.ADO}}<br>Week: ${{p.Week}}<br>Month: ${{p.Month}}`);
    }}
  }}).addTo(map);
  if(selected==='all')map.setView([10.77,106.7],9);
  else map.fitBounds(L.geoJSON(geoData.features.filter(f=>f.properties.NAME_2===selected)).getBounds());
}}
render("ADO","all");

document.getElementById("metricSelect").addEventListener("change",e=>render(e.target.value,dSel.value));
dSel.addEventListener("change",()=>render(document.getElementById("metricSelect").value,dSel.value));
document.getElementById("radiusToggle").addEventListener("change",e=>{{if(e.target.checked)radiusGroup.addTo(map);else map.removeLayer(radiusGroup);}});

// üìä Legend + Stats
const legend=L.control({{position:'bottomleft'}});
legend.onAdd=function(){{const div=L.DomUtil.create('div','legend');div.innerHTML='<b>üìè B√°n k√≠nh</b><br>';
radiusDefs.forEach(r=>{{div.innerHTML+=`<i style="background:${{r.color}}"></i>${{r.label}}<br>`}});
return div;}};legend.addTo(map);

const stats=L.control({{position:'bottomright'}});
stats.onAdd=function(){{const div=L.DomUtil.create('div','stats');
div.innerHTML='<b>üìä T·ª∑ l·ªá ƒë∆°n theo b√°n k√≠nh</b><br>'+
statsData.map(s=>`${{s.radius_group}}: ${{s.Pct}}% (${{s.Count}} ƒë∆°n)`).join('<br>');
return div;}};stats.addTo(map);
</script>
</body>
</html>
"""

# ============================================================
# 9Ô∏è‚É£ EXPORT
# ============================================================
with open(output_html, "w", encoding="utf-8") as f:
    f.write(html)
print("‚úÖ ƒê√£ t·∫°o b·∫£n ƒë·ªì V6 ho√†n ch·ªânh:", output_html)
